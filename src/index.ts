import { app, BrowserWindow } from 'electron';
import * as path from 'path';
import { spawn, ChildProcess } from 'child_process';
// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}

let pythonProcess: ChildProcess | null = null;
async function startBackend() {
  // Path to pyinstaller script
  let scriptPath: string;
  if (app.isPackaged) {
    scriptPath = path.join(process.resourcesPath, 'app');

    if (process.platform === 'win32') {
      scriptPath += '.exe';
    }
  } else {
    scriptPath = path.join(__dirname, '..', '..', 'flask-backend', 'dist', 'app');

    if (process.platform === 'win32') {
      scriptPath += '.exe';
    }
  }
  console.log('Starting Flask backend at:', scriptPath);

  // Start Python process
  pythonProcess = spawn(scriptPath);

  // Handle Python process output
  pythonProcess.stdout.on('data', (data: string) => {
    console.log(`Flask stdout: ${data}`);
  });

  pythonProcess.stderr.on('data', (data: string) => {
    console.error(`Flask stderr: ${data}`);
  });

  pythonProcess.on('close', (code: string) => {
    console.log(`Flask process exited with code ${code}`);
  });

  pythonProcess.on('error', (error: string) => {
    console.error('Failed to start Flask process:', error);
  });
}

const createWindow = (): void => {
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    height: 600,
    width: 1000,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
      devTools: !app.isPackaged
    },
    autoHideMenuBar: true
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', async () => {
  await startBackend();
  createWindow();
});

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
  if (pythonProcess) {
    pythonProcess.kill();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
