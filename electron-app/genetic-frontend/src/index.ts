import { app, BrowserWindow } from 'electron';
const path = require('path');
const { spawn } = require('child_process');

// Store the Python process reference
let pythonProcess: any = null;


// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}

const createWindow = (): void => {
  
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    height: 600,
    width: 800,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
      nodeIntegration: true,
      contextIsolation: false,
    },
  });

  mainWindow.webContents.session.webRequest.onHeadersReceived((details, callback) => {
    callback({
      responseHeaders: {
        ...details.responseHeaders,
        'Content-Security-Policy': [
          "default-src 'self' http://localhost:5000; script-src 'self' 'unsafe-inline' 'unsafe-eval'; connect-src 'self' http://localhost:5000"
        ]
      }
    });
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Open the DevTools.
  // mainWindow.webContents.openDevTools();
};

function startPythonBackend() {
  // Path to your Python script
  const scriptPath = path.join(__dirname, '..', '..', '..', 'flask-backend', 'app.py');
  console.log('Starting Flask backend at:', scriptPath);
  
  // Start Python process
  pythonProcess = spawn('python', [scriptPath]);
  
  // Handle Python process output
  pythonProcess.stdout.on('data', (data: string) => {
    console.log(`Flask stdout: ${data}`);
  });
  
  pythonProcess.stderr.on('data', (data: string) => {
    console.error(`Flask stderr: ${data}`);
  });
  
  pythonProcess.on('close', (code: string) => {
    console.log(`Flask process exited with code ${code}`);
  });
  
  pythonProcess.on('error', (error: string) => {
    console.error('Failed to start Flask process:', error);
  });
}

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', () => {
	startPythonBackend();
	createWindow();
});

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }

  // Kill Python process
  if (pythonProcess) {
    pythonProcess.kill();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
