"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const node_path_1 = __importDefault(require("node:path"));
const debug_1 = __importDefault(require("debug"));
const html_webpack_plugin_1 = __importDefault(require("html-webpack-plugin"));
const webpack_1 = __importDefault(require("webpack"));
const webpack_merge_1 = require("webpack-merge");
const AssetRelocatorPatch_1 = __importDefault(require("./util/AssetRelocatorPatch"));
const processConfig_1 = __importDefault(require("./util/processConfig"));
const rendererTypeUtils_1 = require("./util/rendererTypeUtils");
const d = (0, debug_1.default)('electron-forge:plugin:webpack:webpackconfig');
var RendererTarget;
(function (RendererTarget) {
    RendererTarget[RendererTarget["Web"] = 0] = "Web";
    RendererTarget[RendererTarget["ElectronRenderer"] = 1] = "ElectronRenderer";
    RendererTarget[RendererTarget["ElectronPreload"] = 2] = "ElectronPreload";
    RendererTarget[RendererTarget["SandboxedPreload"] = 3] = "SandboxedPreload";
})(RendererTarget || (RendererTarget = {}));
var WebpackTarget;
(function (WebpackTarget) {
    WebpackTarget["Web"] = "web";
    WebpackTarget["ElectronPreload"] = "electron-preload";
    WebpackTarget["ElectronRenderer"] = "electron-renderer";
})(WebpackTarget || (WebpackTarget = {}));
function isNotNull(item) {
    return item !== null;
}
function rendererTargetToWebpackTarget(target) {
    switch (target) {
        case RendererTarget.Web:
        case RendererTarget.SandboxedPreload:
            return WebpackTarget.Web;
        case RendererTarget.ElectronPreload:
            return WebpackTarget.ElectronPreload;
        case RendererTarget.ElectronRenderer:
            return WebpackTarget.ElectronRenderer;
    }
}
class WebpackConfigGenerator {
    constructor(pluginConfig, projectDir, isProd, port) {
        // Users can override this method in a subclass to provide custom logic or
        // configuration parameters.
        this.preprocessConfig = async (config) => config({}, {
            mode: this.mode,
        });
        this.pluginConfig = pluginConfig;
        this.projectDir = projectDir;
        this.webpackDir = node_path_1.default.resolve(projectDir, '.webpack');
        this.isProd = isProd;
        this.port = port;
        d('Config mode:', this.mode);
    }
    async resolveConfig(config) {
        let rawConfig = typeof config === 'string'
            ? // eslint-disable-next-line @typescript-eslint/no-require-imports
                require(node_path_1.default.resolve(this.projectDir, config))
            : config;
        if (rawConfig && typeof rawConfig === 'object' && 'default' in rawConfig) {
            rawConfig = rawConfig.default;
        }
        return (0, processConfig_1.default)(this.preprocessConfig, rawConfig);
    }
    get mode() {
        return this.isProd ? 'production' : 'development';
    }
    get rendererSourceMapOption() {
        return this.isProd ? 'source-map' : 'eval-source-map';
    }
    rendererEntryPoint(entryPoint, basename) {
        if (this.isProd) {
            return `\`file://$\{require('path').resolve(__dirname, '..', 'renderer', '${entryPoint.name}', '${basename}')}\``;
        }
        const protocol = this.pluginConfig.devServer?.server === 'https' ? 'https' : 'http';
        const baseUrl = `${protocol}://localhost:${this.port}/${entryPoint.name}`;
        if (basename !== 'index.html') {
            return `'${baseUrl}/${basename}'`;
        }
        return `'${baseUrl}'`;
    }
    toEnvironmentVariable(entryPoint, preload = false) {
        const suffix = preload ? '_PRELOAD_WEBPACK_ENTRY' : '_WEBPACK_ENTRY';
        return `${entryPoint.name.toUpperCase().replace(/ /g, '_')}${suffix}`;
    }
    getPreloadDefine(entryPoint) {
        if (!(0, rendererTypeUtils_1.isNoWindow)(entryPoint)) {
            if (this.isProd) {
                return `require('path').resolve(__dirname, '../renderer', '${entryPoint.name}', 'preload.js')`;
            }
            return `'${node_path_1.default.resolve(this.webpackDir, 'renderer', entryPoint.name, 'preload.js').replace(/\\/g, '\\\\')}'`;
        }
        else {
            // If this entry-point has no configured preload script just map this constant to `undefined`
            // so that any code using it still works.  This makes quick-start / docs simpler.
            return 'undefined';
        }
    }
    get allPluginRendererOptions() {
        return Array.isArray(this.pluginConfig.renderer) ? this.pluginConfig.renderer : [this.pluginConfig.renderer];
    }
    getDefines() {
        const defines = {};
        for (const pluginRendererOptions of this.allPluginRendererOptions) {
            if (!pluginRendererOptions.entryPoints || !Array.isArray(pluginRendererOptions.entryPoints)) {
                throw new Error('Required config option "renderer.entryPoints" has not been defined');
            }
            for (const entryPoint of pluginRendererOptions.entryPoints) {
                const entryKey = this.toEnvironmentVariable(entryPoint);
                if ((0, rendererTypeUtils_1.isLocalWindow)(entryPoint)) {
                    defines[entryKey] = this.rendererEntryPoint(entryPoint, 'index.html');
                }
                else {
                    defines[entryKey] = this.rendererEntryPoint(entryPoint, 'index.js');
                }
                defines[`process.env.${entryKey}`] = defines[entryKey];
                const preloadDefineKey = this.toEnvironmentVariable(entryPoint, true);
                defines[preloadDefineKey] = this.getPreloadDefine(entryPoint);
                defines[`process.env.${preloadDefineKey}`] = defines[preloadDefineKey];
            }
        }
        return defines;
    }
    async getMainConfig() {
        const mainConfig = await this.resolveConfig(this.pluginConfig.mainConfig);
        if (!mainConfig.entry) {
            throw new Error('Required option "mainConfig.entry" has not been defined');
        }
        const fix = (item) => {
            if (typeof item === 'string')
                return fix([item])[0];
            if (Array.isArray(item)) {
                return item.map((val) => (val.startsWith('./') ? node_path_1.default.resolve(this.projectDir, val) : val));
            }
            const ret = {};
            for (const key of Object.keys(item)) {
                ret[key] = fix(item[key]);
            }
            return ret;
        };
        mainConfig.entry = fix(mainConfig.entry);
        return (0, webpack_merge_1.merge)({
            devtool: 'source-map',
            target: 'electron-main',
            mode: this.mode,
            output: {
                path: node_path_1.default.resolve(this.webpackDir, 'main'),
                filename: 'index.js',
                libraryTarget: 'commonjs2',
            },
            plugins: [new webpack_1.default.DefinePlugin(this.getDefines())],
            node: {
                __dirname: false,
                __filename: false,
            },
        }, mainConfig || {});
    }
    async getRendererConfig(rendererOptions) {
        const entryPointsForTarget = {
            web: [],
            electronRenderer: [],
            electronPreload: [],
            sandboxedPreload: [],
        };
        for (const entry of rendererOptions.entryPoints) {
            const target = entry.nodeIntegration ?? rendererOptions.nodeIntegration ? 'electronRenderer' : 'web';
            const preloadTarget = entry.nodeIntegration ?? rendererOptions.nodeIntegration ? 'electronPreload' : 'sandboxedPreload';
            if ((0, rendererTypeUtils_1.isPreloadOnly)(entry)) {
                entryPointsForTarget[preloadTarget].push(entry);
            }
            else {
                entryPointsForTarget[target].push(entry);
                if ((0, rendererTypeUtils_1.isLocalWindow)(entry) && entry.preload) {
                    entryPointsForTarget[preloadTarget].push({ ...entry, preload: entry.preload });
                }
            }
        }
        const rendererConfigs = await Promise.all([
            await this.buildRendererConfigs(rendererOptions, entryPointsForTarget.web, RendererTarget.Web),
            await this.buildRendererConfigs(rendererOptions, entryPointsForTarget.electronRenderer, RendererTarget.ElectronRenderer),
            await this.buildRendererConfigs(rendererOptions, entryPointsForTarget.electronPreload, RendererTarget.ElectronPreload),
            await this.buildRendererConfigs(rendererOptions, entryPointsForTarget.sandboxedPreload, RendererTarget.SandboxedPreload),
        ].reduce((configs, allConfigs) => allConfigs.concat(configs)));
        return rendererConfigs.filter(isNotNull);
    }
    buildRendererBaseConfig(target) {
        return {
            target: rendererTargetToWebpackTarget(target),
            devtool: this.rendererSourceMapOption,
            mode: this.mode,
            output: {
                path: node_path_1.default.resolve(this.webpackDir, 'renderer'),
                filename: '[name]/index.js',
                globalObject: 'self',
                ...(this.isProd ? {} : { publicPath: '/' }),
            },
            node: {
                __dirname: false,
                __filename: false,
            },
            plugins: [new AssetRelocatorPatch_1.default(this.isProd, target === RendererTarget.ElectronRenderer || target === RendererTarget.ElectronPreload)],
        };
    }
    async buildRendererConfigForWebOrRendererTarget(rendererOptions, entryPoints, target) {
        if (!(0, rendererTypeUtils_1.isLocalOrNoWindowEntries)(entryPoints)) {
            throw new Error('Invalid renderer entry point detected.');
        }
        const entry = {};
        const baseConfig = this.buildRendererBaseConfig(target);
        const rendererConfig = await this.resolveConfig(rendererOptions.config);
        const output = {
            path: node_path_1.default.resolve(this.webpackDir, 'renderer'),
            filename: '[name]/index.js',
            globalObject: 'self',
            ...(this.isProd ? {} : { publicPath: '/' }),
        };
        const plugins = [];
        for (const entryPoint of entryPoints) {
            entry[entryPoint.name] = (entryPoint.prefixedEntries || []).concat([entryPoint.js]);
            if ((0, rendererTypeUtils_1.isLocalWindow)(entryPoint)) {
                plugins.push(new html_webpack_plugin_1.default({
                    title: entryPoint.name,
                    template: entryPoint.html,
                    filename: `${entryPoint.name}/index.html`,
                    chunks: [entryPoint.name].concat(entryPoint.additionalChunks || []),
                }));
            }
        }
        return (0, webpack_merge_1.merge)(baseConfig, rendererConfig || {}, { entry, output, plugins });
    }
    async buildRendererConfigForPreloadOrSandboxedPreloadTarget(rendererOptions, entryPoints, target) {
        if (entryPoints.length === 0) {
            return null;
        }
        const externals = ['electron', 'electron/renderer', 'electron/common', 'events', 'timers', 'url'];
        const entry = {};
        const baseConfig = this.buildRendererBaseConfig(target);
        const rendererConfig = await this.resolveConfig(entryPoints[0].preload?.config || rendererOptions.config);
        for (const entryPoint of entryPoints) {
            entry[entryPoint.name] = (entryPoint.prefixedEntries || []).concat([entryPoint.preload.js]);
        }
        const config = {
            target: rendererTargetToWebpackTarget(target),
            entry,
            output: {
                path: node_path_1.default.resolve(this.webpackDir, 'renderer'),
                filename: '[name]/preload.js',
                globalObject: 'self',
                ...(this.isProd ? { publicPath: '' } : { publicPath: '/' }),
            },
            plugins: target === RendererTarget.ElectronPreload ? [] : [new webpack_1.default.ExternalsPlugin('commonjs2', externals)],
        };
        return (0, webpack_merge_1.merge)(baseConfig, rendererConfig || {}, config);
    }
    async buildRendererConfigs(rendererOptions, entryPoints, target) {
        if (entryPoints.length === 0) {
            return [];
        }
        const rendererConfigs = [];
        if (target === RendererTarget.Web || target === RendererTarget.ElectronRenderer) {
            rendererConfigs.push(this.buildRendererConfigForWebOrRendererTarget(rendererOptions, entryPoints, target));
            return rendererConfigs;
        }
        else if (target === RendererTarget.ElectronPreload || target === RendererTarget.SandboxedPreload) {
            if (!(0, rendererTypeUtils_1.isPreloadOnlyEntries)(entryPoints)) {
                throw new Error('Invalid renderer entry point detected.');
            }
            const entryPointsWithPreloadConfig = [], entryPointsWithoutPreloadConfig = [];
            entryPoints.forEach((entryPoint) => (entryPoint.preload.config ? entryPointsWithPreloadConfig : entryPointsWithoutPreloadConfig).push(entryPoint));
            rendererConfigs.push(this.buildRendererConfigForPreloadOrSandboxedPreloadTarget(rendererOptions, entryPointsWithoutPreloadConfig, target));
            entryPointsWithPreloadConfig.forEach((entryPoint) => {
                rendererConfigs.push(this.buildRendererConfigForPreloadOrSandboxedPreloadTarget(rendererOptions, [entryPoint], target));
            });
            return rendererConfigs;
        }
        else {
            throw new Error('Invalid renderer entry point detected.');
        }
    }
}
exports.default = WebpackConfigGenerator;
//# sourceMappingURL=data:application/json;base64,